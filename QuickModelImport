import bpy
import math
#https://www.osrsbox.com/tools/model-search/
DumpLocation = 'C:\\Users\\James\\Documents\\Trillion\\ModelDumper\\models-26may2022\\models\\'
ModelIDs = [6639, 6670]

Name = 'DharoksPlatebody'
ForceJoinImports = True;
ClearSplitNormals = True;
Shrink100x = True;

#TextureBakingOptions - For unity exports - Must have ForceJoinImports true
ConvertToTexture = True
PowerOf2Texture = True
TextureStorageLocation = 'C:\\Users\\James\\Documents\\Blender\\RunescapePlayerModel\\Textures\\'
TextureName = '' #BlankForObjectName
#--------------------#

loadedObjects = []

for modelID in ModelIDs:
    fullpath = DumpLocation + str(modelID) + '.obj'
    obj = bpy.ops.import_scene.obj(filepath=fullpath)
    obj_object = bpy.context.selected_objects[0]
    obj_object.name = Name
    loadedObjects.append(obj_object)    

for model in loadedObjects:
    model.select_set(True)
    bpy.context.view_layer.objects.active = model
    
if(ForceJoinImports):
    bpy.ops.object.join()
    model.name = Name
    
if(Shrink100x):
    bpy.ops.transform.resize(value=(0.01,0.01,0.01))
    bpy.ops.object.transform_apply(location=False, rotation=True, scale=True)

    
if(ClearSplitNormals):    
    selection = bpy.context.selected_objects

    for o in selection:
        bpy.context.view_layer.objects.active = o
        bpy.ops.mesh.customdata_custom_splitnormals_clear()
        
        
#-------------------#
def to_hex(c):
    if c < 0.0031308:
        srgb = 0.0 if c < 0.0 else c * 12.92
    else:
        srgb = 1.055 * math.pow(c, 1.0 / 2.4) - 0.055

    return hex(max(min(int(srgb * 255 + 0.5), 255), 0))

def toHexGam(r,g,b):
   
    rgb = [r,g,b]
    result = ""
    i=0
    while i < 3:
        val = str(to_hex(rgb[i]))
        val = val[2:]
        if len(val) == 1:
            val += val
        result+=val
        i+=1
    return result

def toHexLin(r,g,b):
    r2 = int(r * 255)
    g2 = int(g * 255)
    b2 = int(b * 255)
    hex = '%02x%02x%02x' % (r2, g2, b2)
    return hex

def toRGB(hex):
    rgb = tuple(int(hex[i:i+2], 16) for i in (0, 2, 4))
    return rgb

colors = []

if(ConvertToTexture and ForceJoinImports):
    for ob in bpy.context.selected_editable_objects:
        mesh = ob.data
        for f in mesh.polygons: 
            slot = ob.material_slots[f.material_index]
            mat = slot.material
            if mat is not None:
                col = mat.diffuse_color
                hexGam = toHexGam(col[0], col[1], col[2])
                if(not (hexGam in colors)):
                    colors.append(hexGam)
                    #print('R: ', col[0], 'G:, ', col[1], 'B: ', col[2], '   Hex: ', hex)

        
            
            
            
    size = 1
    print('Total Colours: ', len(colors))
    for i in range(12):
        if(size*size) >= len(colors):
            print('Image size is ', size, 'x', size)
            break
        if(PowerOf2Texture):
            size = size * 2
        else:
            size = size + 1
            
    
    if(len(TextureName) < 1):
        TextureName = Name
    image = bpy.data.images.new(TextureName, alpha=True, width=size, height=size)
    image.filepath_raw = TextureStorageLocation + TextureName + ".png"
    image.file_format = 'PNG'
    
    for x in range(size):
        for y in range(size):
            pixStart = (x*size + y) * 4
            image.pixels[pixStart : pixStart + 4 ] = (0, 0, 0, 1)
            
    pixIndex = 0  
    for col in colors:
        r, g, b = toRGB(col)
        
        pixStart = (pixIndex) * 4
        image.pixels[pixStart : pixStart + 4 ] = (r / 255, g/255, b/255, 1)
        #print('R: ', r / 255, 'G:, ', g /255, 'B: ',b/255, '   Hex: ', col)
        pixIndex = pixIndex + 1
            

    image.save()
    
    for ob in bpy.context.selected_editable_objects:
        mesh = ob.data

        #remove existing uvs
        alluvcount = len(ob.data.uv_layers)
        for uv in range(alluvcount):
            ob.data.uv_layers.remove(ob.data.uv_layers[alluvcount - uv - 1])
            
             
        #creat new uv layer  
        uvlayer = mesh.uv_layers.new() 
        mesh.uv_layers.active = uvlayer  
        

        for f in mesh.polygons:
            
            slot = ob.material_slots[f.material_index]
            mat = slot.material
            col = mat.diffuse_color
            hexColor = toHexGam(col[0], col[1], col[2])
            for vert_idx, loop_idx in zip(f.vertices, f.loop_indices):
               
                index = colors.index(hexColor)
                increment = 1 / size
                halfinc = increment / 2
                height = math.floor(index / size) * increment + halfinc
                length = (index % size) * increment + halfinc
                uvlayer.data[loop_idx].uv = (length, height)
        
        
        
    for ob in bpy.context.selected_editable_objects:
        ob.active_material_index = 0
        for i in range(len(ob.material_slots)):
            bpy.ops.object.material_slot_remove({'object': ob})
            
        mat = bpy.data.materials.new(name=TextureName)
        ob.data.materials.append(mat)
        bpy.context.object.active_material.use_nodes = True

        material_output = mat.node_tree.nodes.get('Material Output')
        principled_BSDF = mat.node_tree.nodes.get('Principled BSDF')

        tex_node = mat.node_tree.nodes.new('ShaderNodeTexImage')
        tex_node.image = image
       
        mat.node_tree.links.new(tex_node.outputs[0], principled_BSDF.inputs[0])
        
        mat.node_tree.nodes["Principled BSDF"].inputs[7].default_value = 0.0
        mat.node_tree.nodes["Principled BSDF"].inputs[9].default_value = 1.0


